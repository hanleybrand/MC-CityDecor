buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


version = "${mod_version}-${mc_version}-${forge_version}"
group = "com.TzarAnthony.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

project.setVersion(version)
project.setGroup(group)


java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: "${mc_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'CityDecor'

            mods {
                citydecor {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'CityDecor'

            mods {
                citydecor {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'CityDecor'

            mods {
                citydecor {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'citydecor', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                citydecor {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

//tasks.named('processResources', ProcessResources).configure {
//    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
//
//    // based on data from https://minecraft.wiki/w/Data_pack#pack.mcmeta
//    def mc_meta_mc_versions = ["1.19.2": 10, "1.19.3": 10, "1.19.4": 12,
//                               "1.20.0": 15, "1.20.1": 15, "1.20.2": 18,
//                               "1.20.3": 26, "1.20.4": 26, "1.20.5": 41,
//                               "1.20.6": 41, "1.21":   48, "1.21.1": 48,
//                               "1.21.2": 57, "1.21.3": 57, "1.21.4": 61
//    ]
//    def mc_meta_version = mc_meta_mc_versions["${mc_version}"]
//
//    def replaceProperties = [
//            minecraft_version: mc_version, mc_version_range: mc_version_range,
//            forge_version: forge_version, forge_version_range: forge_version_range,
//            loader_version_range: loader_version_range,
//            mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
//            mod_authors: mod_authors, mod_description: mod_description,
//            mc_meta_version: mc_meta_version
//    ]
//
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
//        expand replaceProperties + [project: project]
//    }
//}

processResources {
    def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']

    // based on data from https://minecraft.wiki/w/Data_pack#pack.mcmeta
    def mc_meta_mc_versions = ["1.19.2": 10, "1.19.3": 10, "1.19.4": 12,
                               "1.20.0": 15, "1.20.1": 15, "1.20.2": 18,
                               "1.20.3": 26, "1.20.4": 26, "1.20.5": 41,
                               "1.20.6": 41, "1.21":   48, "1.21.1": 48,
                               "1.21.2": 57, "1.21.3": 57, "1.21.4": 61
                              ]
    def mc_meta_version = mc_meta_mc_versions["${mc_version}"]

    def replaceProperties = [
            minecraft_version: mc_version, mc_version_range: mc_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            mc_meta_version: mc_meta_version
    ]

    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modid}",
                "Specification-Vendor"    : "${modid}",
                "Specification-Version"   : "${mod_version}", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "${modid}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}


jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}